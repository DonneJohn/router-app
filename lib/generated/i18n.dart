import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get Chang_Mode => "Chang Mode";
  String get ConfirmPassword => "Confirm Password";
  String get CurrentMode => "Current Mode";
  String get Device1 => "Device1";
  String get HardwareSystem => "Hardware and System";
  String get InformSettings => "Inform Setting";
  String get InternetSetting => "Internet Setting";
  String get LanguageSetting => "Language";
  String get Plug_5g_wifi => "5G";
  String get ResetNow => "Reset Now";
  String get SSID => "SSID";
  String get SignalStrength => "Signal Strength";
  String get UserExperiencePlan => "User Experience Plan";
  String get aboutRouter => "About Router";
  String get add => "Add";
  String get addAddress => "Add Address";
  String get addRouter => "addRouter";
  String get addVpn => "Add Vpn";
  String get addVpnSetting => "Add Vpn";
  String get addressList => "Address List";
  String get appName => "TianYi";
  String get autoSupport => "Auto(support)";
  String get bandwidth => "Bandwidth:";
  String get bind_now => "bind";
  String get bind_success => "bind success";
  String get blacklist => "blacklist";
  String get broadbandAccount => "Broadband Account";
  String get broadbandPassword => "Broadband Password";
  String get cancel => "cancel";
  String get cleanCache => "Clean Cache";
  String get close => "close";
  String get connectMode => "Connect Mode";
  String get connect_dhcp => "dhcp connect";
  String get deviceInfo => "deviceInfo";
  String get dhcpMode => "Dhcp mode";
  String get dhcp_mode => "dhcp mode";
  String get download => "download";
  String get downloadSpeed => "DownloadSpeed";
  String get emptyToastMessage => "account or password can not empty";
  String get encryptType => "EncryptType";
  String get forbid_network => "forbid network";
  String get forbitInternet => "forbidInternet";
  String get gateway => "gateway:";
  String get guestWifi => "Guest Wifi";
  String get hideWifi => "Hide Wifi";
  String get home_bandwidth_unknown => "unknown";
  String get home_click_to_detect => "Detect";
  String get home_netStatus => "NetStatus";
  String get home_netStatus_safety => "safe";
  String get home_tab_0 => "routerStatus";
  String get home_tab_1 => "Controller";
  String get home_tab_2 => "Profile";
  String get home_testSpeed => "Test Speed";
  String get inBlacklist => "inBlacklist";
  String get intelligenceVpn => "Intelligence Vpn";
  String get intelligentSpeedLimit => "intelligent Speed Limit";
  String get internetAccess => "internetAcces";
  String get internetOptimize => "Internet Optimize";
  String get internetSetting => "Internet Setting";
  String get internet_status => "internet connected";
  String get ip => "IP";
  String get languageSelect_english => "english";
  String get languageSelect_simplifiedChinese => "simplified Chinese";
  String get language_setting => "language setting";
  String get limitByAddress => "Limited by Address";
  String get limitByDevice => "Limited By Device";
  String get limitedPeriod => "limitedPeriod";
  String get linkType => "linkType";
  String get locationSelection => "Location";
  String get logout => "logout";
  String get logoutFail => "logout fail";
  String get logoutSetting => "Logout";
  String get logoutSuccess => "logout success";
  String get logoutTIitle => "logout now?";
  String get mac => "MAC";
  String get mannul => "mannul";
  String get manual => "manual";
  String get model => "model";
  String get moreTools => "More Tools";
  String get name => "name";
  String get netMask => "netMask";
  String get networkSettings => "networkSettings";
  String get no_setting => "no setting";
  String get notSet => "notSet";
  String get ok => "ok";
  String get onlineAlert => "onlineAlert";
  String get operating => "operating";
  String get optional => "optional";
  String get password => "Password";
  String get phone => "phone";
  String get please_bind_first => "please bind router first";
  String get plug24g_wifi => "2.4G";
  String get pppoe => "PPPOE";
  String get protocolType => "Protocol Type";
  String get rateLimit => "rateLimit";
  String get rebootForEffect => "reboot to take effect";
  String get rebootRouter => "Reboot Router";
  String get required => "required";
  String get resetPassword => "Reset Password";
  String get routerSettings => "RouterSettings";
  String get saveSetting => "saving setting";
  String get scanNewRouter => "scan new router";
  String get scan_mac_behind_router => "click to scan barcode behind router";
  String get scaned_barcode => "scanned mac：";
  String get server => "Server";
  String get serverList => "Server List";
  String get settingMode => "Setting Mode";
  String get shareRouter => "Share Router";
  String get static_connect => "static connect";
  String get storageAccess => "storageAccess";
  String get systemUpgrade => "System Upgrade";
  String get testSpeed => "testSpeed";
  String get toolbox => "toolbox";
  String get traffic => "traffic:";
  String get type => "type";
  String get unbind => "unbind";
  String get unbindFail => "unbind fail";
  String get unbindRouter => "Unbind Router";
  String get unbindSuccess => "unbind success";
  String get unbindTitle => "are you sure unbind this router？";
  String get upgradeHelper => "Upgrade Helper";
  String get upload => "upload";
  String get uploadSpeed => "UploadSpeed";
  String get userFeedback => "User feedback";
  String get userName => "User Name";
  String get userPolicy => "User Policy";
  String get vendor => "vendor";
  String get vpn => "Vpn";
  String get vpnSetting => "Vpn Setting";
  String get whitelist => "whitelist";
  String get wifiGuard => "wifiGuard";
  String get wifiOptimize => "wifiOptimize";
  String get wifiSetings => "WiFi Setting";
  String get wifiSettings => "Wi-Fi Setting";
  String get wps => "WPS";
  String get zerokbs => "0.00kb/s";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get upload => "上传";
  @override
  String get uploadSpeed => "上传速度";
  @override
  String get internetSetting => "网络设置";
  @override
  String get type => "类型";
  @override
  String get required => "必填";
  @override
  String get logout => "退出登录";
  @override
  String get password => "密码";
  @override
  String get connectMode => "上网模式设置";
  @override
  String get pppoe => "PPPOE上网";
  @override
  String get model => "型号";
  @override
  String get rebootRouter => "重启路由";
  @override
  String get intelligentSpeedLimit => "智能限速";
  @override
  String get guestWifi => "访客网络";
  @override
  String get ip => "ip地址";
  @override
  String get testSpeed => "一键测速";
  @override
  String get connect_dhcp => "动态IP上网";
  @override
  String get scan_mac_behind_router => "点击扫描路由器背面的条形码";
  @override
  String get optional => "选填";
  @override
  String get whitelist => "白名单";
  @override
  String get UserExperiencePlan => "用户体验计划";
  @override
  String get hideWifi => "隐藏网络不被人发现";
  @override
  String get phone => "手机";
  @override
  String get onlineAlert => "上线提醒";
  @override
  String get toolbox => "工具箱";
  @override
  String get home_netStatus_safety => "安全";
  @override
  String get inBlacklist => "拉黑";
  @override
  String get limitByDevice => "按选择设备限流";
  @override
  String get encryptType => "加密方式";
  @override
  String get upgradeHelper => "升级助手";
  @override
  String get server => "服务器";
  @override
  String get home_tab_0 => "路由设备";
  @override
  String get home_tab_1 => "工具箱";
  @override
  String get home_netStatus => "网络状态";
  @override
  String get addAddress => "添加地址";
  @override
  String get limitedPeriod => "限制时段";
  @override
  String get Device1 => "设备1";
  @override
  String get wifiSettings => "WI-FI设置";
  @override
  String get home_tab_2 => "我的";
  @override
  String get languageSelect_english => "英文";
  @override
  String get manual => "手动";
  @override
  String get mac => "MAC地址";
  @override
  String get cleanCache => "清除缓存";
  @override
  String get vendor => "品牌";
  @override
  String get Plug_5g_wifi => "5G Wi-Fi开关";
  @override
  String get addressList => "地址列表";
  @override
  String get addRouter => "添加路由器";
  @override
  String get scaned_barcode => "已扫描到的路由器mac：";
  @override
  String get operating => "正在操作";
  @override
  String get bind_success => "绑定成功";
  @override
  String get close => "关闭";
  @override
  String get SSID => "名称";
  @override
  String get languageSelect_simplifiedChinese => "简体中文";
  @override
  String get mannul => "手动";
  @override
  String get rateLimit => "限速";
  @override
  String get unbindFail => "解绑失败";
  @override
  String get bandwidth => "带宽:";
  @override
  String get addVpnSetting => "添加VPN配置";
  @override
  String get blacklist => "黑名单";
  @override
  String get protocolType => "协议类型";
  @override
  String get language_setting => "语言设置";
  @override
  String get emptyToastMessage => "用户名或者密码不能为空";
  @override
  String get HardwareSystem => "硬件与系统";
  @override
  String get home_testSpeed => "一键测速";
  @override
  String get logoutSetting => "退出登录";
  @override
  String get linkType => "连接类型";
  @override
  String get plug24g_wifi => "2.4G Wi-Fi开关";
  @override
  String get InformSettings => "通知设置";
  @override
  String get logoutSuccess => "退出登录成功";
  @override
  String get resetPassword => "重置密码";
  @override
  String get home_click_to_detect => "点此检测";
  @override
  String get notSet => "未设置";
  @override
  String get dhcpMode => "动态IP上网";
  @override
  String get download => "下载";
  @override
  String get saveSetting => "正在保存配置";
  @override
  String get storageAccess => "全盘访问";
  @override
  String get traffic => "消耗流量:";
  @override
  String get SignalStrength => "信号强度";
  @override
  String get vpnSetting => "vpn设置";
  @override
  String get CurrentMode => "当前模式";
  @override
  String get userFeedback => "用户反馈";
  @override
  String get add => "添加";
  @override
  String get wifiGuard => "防蹭网";
  @override
  String get forbid_network => "禁止联网";
  @override
  String get downloadSpeed => "下载速度";
  @override
  String get addVpn => "添加VPN配置";
  @override
  String get unbindTitle => "确认解除该路由器的绑定吗？";
  @override
  String get settingMode => "配置方式";
  @override
  String get serverList => "服务器列表";
  @override
  String get autoSupport => "自动(推荐)";
  @override
  String get unbindRouter => "解绑路由器";
  @override
  String get deviceInfo => "设备信息";
  @override
  String get please_bind_first => "请先绑定设备";
  @override
  String get unbind => "解除";
  @override
  String get scanNewRouter => "扫描新的路由器";
  @override
  String get home_bandwidth_unknown => "未知";
  @override
  String get name => "名称";
  @override
  String get routerSettings => "路由设置";
  @override
  String get wps => "WPS连接";
  @override
  String get intelligenceVpn => "智能vpn限流";
  @override
  String get locationSelection => "地区选择";
  @override
  String get systemUpgrade => "系统升级";
  @override
  String get wifiOptimize => "wifi优化";
  @override
  String get limitByAddress => "按服务地址限流";
  @override
  String get bind_now => "立即绑定";
  @override
  String get static_connect => "静态ip上网";
  @override
  String get shareRouter => "分享路由器";
  @override
  String get rebootForEffect => "重启APP后生效";
  @override
  String get internetAccess => "访问控制";
  @override
  String get forbitInternet => "禁止联网";
  @override
  String get zerokbs => "0.00kb/s";
  @override
  String get aboutRouter => "关于路由器";
  @override
  String get internet_status => "网络连接正常";
  @override
  String get ok => "确定";
  @override
  String get ResetNow => "立即重置";
  @override
  String get broadbandPassword => "宽带密码";
  @override
  String get unbindSuccess => "解绑成功";
  @override
  String get networkSettings => "上网模式设置";
  @override
  String get appName => "天邑路由";
  @override
  String get netMask => "子网掩码";
  @override
  String get Chang_Mode => "切换模式";
  @override
  String get userName => "用户名";
  @override
  String get ConfirmPassword => "重复密码";
  @override
  String get internetOptimize => "上网场景优化";
  @override
  String get vpn => "VPN设置";
  @override
  String get InternetSetting => "网络设置";
  @override
  String get logoutFail => "退出登录失败";
  @override
  String get dhcp_mode => "配置方式";
  @override
  String get no_setting => "无设置";
  @override
  String get LanguageSetting => "语言设置";
  @override
  String get broadbandAccount => "宽带账号";
  @override
  String get logoutTIitle => "立即退出当前账号?";
  @override
  String get gateway => "网关:";
  @override
  String get wifiSetings => "WI-FI设置";
  @override
  String get moreTools => "更多工具";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh_CN":
          S.current = const $zh_CN();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
